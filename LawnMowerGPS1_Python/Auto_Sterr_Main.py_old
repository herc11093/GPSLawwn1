import math
import loadField
import serial
import GV
import Auto_Steer_Trig
import AutoSteerSumulator
import AutoSteer_Setup
import keyboard
import time
import _thread
import threading
import TempPy
import Serial_NMEA

#AutoSteer_Setup.Loadconfigfile()
#load Field Data
#filedData = np.genfromtxt('myfile.csv',delimiter=',')

#def I2Cwrite(value):  #i2C stuff
#    bus.write_byte_data(address, 0, value)
#    return -1


GV.startx = 1
GV.starty = 1

#GV.finishx = 200.4
#GV.finishy = 50.12
GV.currentx1 = 2
GV.currenty1 = 2
#GV.CurrentntHeader = 0
GV.Set_SteerAng = 0.0

if GV.SerialPort_On: 
    #ser=serial.Serial(port = "COM3", baudrate=19200,bytesize=8, timeout=2, stopbits=serial.STOPBITS_ONE)
     ser = serial.Serial(            
     port='/dev/serial0',
     baudrate = 19200,
     parity=serial.PARITY_NONE,
     stopbits=serial.STOPBITS_ONE,
     bytesize=serial.EIGHTBITS,
     timeout=0.1
     )
     print ("Starting serl port")
     tim = "30"
     ser.write(bytes(tim, 'UTF-8'))


def FieldRunLoop():
   # global GV.startx, GV.starty, GV.finishx, GV.finishy, GV.currentx1, GV.currenty1, GV.CurrentHeader, GV.Set_SteerAng,Simstopstart
  

    #load field into array
    #start field
    #get field size
    fieldpoints = 100
    fieldpoints = 2

    fieldpoints = len(GV.PointX)-1
    GV.gogo = 0 #90


    #test cords.


    print("Round1")
   # flogtrack= open("logtrack.csv","w+")
    GV.flogtrack.write("AimAng1,AimAang2,Aimx,Aimy,GV.currentx1,GV.currenty1,GV.startx,GV.starty,GV.finishx,GV.finishy,dist,GV.Set_SteerAng,GV.Steerangle,GV.gogo,ToEndPoint,GVQual")
    GV.flogtrack.write('\n')   
    for i in range(0 ,(fieldpoints)) :
        #co py fieldpoint i to global variable
        #updqate .ini file for current position

        j=1
        GV.startx = GV.PointX[i]
        GV.starty  = GV.PointY[i]
        GV.finishx  = GV.PointX[i+1]
        GV.finishy = GV.PointY[i+1]
        #print (GV.startx,GV.starty  )
        NextX = GV.PointX[i+2]
        NextY = GV.PointY[i+2]
        slopeline = Auto_Steer_Trig.GetSlope(GV.startx,GV.starty,GV.finishx,GV.finishy)
        slopeline2 =  Auto_Steer_Trig.GetSlope(GV.finishx,GV.finishy,NextX, NextY)
        con = Auto_Steer_Trig.FindC(GV.startx,GV.starty,slopeline)
        con2 = Auto_Steer_Trig.FindC(NextX,NextY,slopeline2)
        print(i)
        while j == 1:
            dist = round(Auto_Steer_Trig.shortest_distance(GV.currentx1, GV.currenty1, slopeline, con),2)
            #dist = round(Auto_Steer_Trig.shortest_distance(GV.currentx1, GV.currenty1, slopeline2, con2),1)
            Auto_Steer_Trig.getSteerAngle()
            print (dist)
            #print("Set_Steerang", GV.Set_SteerAng )
            #ToEndPoint = round(Auto_Steer_Trig.distance2Point(GV.currentx1,GV.currenty1,GV.finishx,GV.finishy),)
            ToEndPoint = round(Auto_Steer_Trig.shortest_distance(GV.currentx1, GV.currenty1, slopeline2, con2),1)
            #GV.currentx1=round(GV.currentx1,2)
            #GV.currenty1=round(GV.currenty1,2)

            print('{} - {};   {} - {};   {} - {}; error {}   {},{} ,   {}, To End-{}'  .format((round(GV.currentx1,1)), (round(GV.currenty1,1)),(round( GV.startx,1)), (round(GV.starty,1)), (round(GV.finishx,1)), (round(GV.finishy)),round(dist,1), (GV.Set_SteerAng), GV.Steerangle, GV.gogo,ToEndPoint ))           
            GV.flogtrack.write('{},{},{},{},{},{}, {},{},{},{},{},{}'  .format(GV.currentx1, GV.currenty1, GV.startx, GV.starty, GV.finishx, GV.finishy,dist, GV.Set_SteerAng, GV.Steerangle, GV.gogo,ToEndPoint,GV.Qual ))
            GV.flogtrack.write('\n')
            #print(GV.Set_SteerAng)
            #dd = "    "+str(GV.Set_SteerAng)
            dd = str(GV.Set_SteerAng)
           
            #print(GV.SerialPort_On)
            if GV.  SerialPort_On:
                #GV.ser.write( dd)
                ser.write(bytes(dd, 'UTF-8'))
                print("Set Steeering angle                                              ",dd)
                ee = ser.readline()   #  need to come back to
                #ee = 10
                print (ee)  
                try:
                    GV.Steerangle = float(ee   )
                except:
                    print("Invalid heading entry")    
                #print(ee)
                #ser.write(bytes(tim, 'UTF-8'))
                #ser.write(bytes(str(GV.Set_SteerAng), 'UTF-8'))
                print(dd,"______________________________",ee)
                
                #time.sleep(0.5)
                

            if ToEndPoint < 3.5:
                
                j=2 #fF nish CurrentLine
            if keyboard.is_pressed('q'):  # if key 'q' is pressed quit program
                print("key pressed")
                j = 1000
                i=10000
                i=fieldpoints
                GV.Simstopstart = 1000
                print('Quitting track')
                GV.flogtrack.close
                print("Close File")
                #GV.ser.close()
            time.sleep (.05)

print("Starting")
#thread2 = _thread.start_new_thread(AutoSteerSumulator.Runsimulator,())

#thread1 = _thread.start_new_thread(FieldRunLoop(),())
#thread2 = _thread.start_new_thread(TempPy.RunSimFile(),())


#status = threading.Thread(target=TempPy.RunSimFile)
status = threading.Thread(target= Serial_NMEA.UbloxRead)
status.start()
time.sleep(5)


print("Starting 2")
status2 = threading.Thread(target=FieldRunLoop)
status2.start()

#freeze_support()
#status = multiprocessing.Process(target=TempPy.RunSimFile)
#status.start()
#print("Starting 2")
#status2 = multiprocessing.Process(target=FieldRunLoop)
#status2.start()

#TempPy.RunSimFile()

##FieldRunLoop()

print("Finishing")



